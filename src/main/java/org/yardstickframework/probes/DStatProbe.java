/*
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

package org.yardstickframework.probes;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.yardstickframework.BenchmarkConfiguration;
import org.yardstickframework.BenchmarkDriver;
import org.yardstickframework.BenchmarkProbe;
import org.yardstickframework.BenchmarkProbePoint;
import org.yardstickframework.BenchmarkServer;
import org.yardstickframework.BenchmarkServerProbe;
import org.yardstickframework.impl.util.BenchmarkClosure;
import org.yardstickframework.impl.util.BenchmarkProcessLauncher;

import static org.yardstickframework.BenchmarkUtils.errorHelp;
import static org.yardstickframework.BenchmarkUtils.println;

/**
 * Probe that gathers statistics generated by Linux 'dstat' command.
 */
public class DStatProbe implements BenchmarkProbe, BenchmarkServerProbe {
    /** */
    private static final String PATH = "BENCHMARK_PROBE_DSTAT_PATH";

    /** */
    private static final String OPTS = "BENCHMARK_PROBE_DSTAT_OPTS";

    /** */
    private static final int DEFAULT_INTERVAL_IN_SECS = 1;

    /** */
    private static final String DEFAULT_PATH = "dstat";

    /** */
    private static final String DEFAULT_OPTS = "-m --all --noheaders --noupdate " + DEFAULT_INTERVAL_IN_SECS;

    /** */
    private static final String FIRST_LINE_RE =
        "^\\W*\\w*-*memory-usage-* -*total-cpu-usage-* -*dsk/total-* -*net/total-* -*paging-* -*system-*\\s*$";

    /** */
    private static final Pattern FIRST_LINE = Pattern.compile(FIRST_LINE_RE);

    /** */
    private static final String HEADER_LINE_RE = "^\\s*used\\s+buff\\s+cach\\s+free\\s*\\Q|\\E\\s*usr\\s+sys\\s+idl" +
        "\\s+wai\\s+hiq\\s+siq\\s*\\Q|\\E\\s*read\\s+writ\\s*\\Q|\\E\\s*recv\\s+send\\s*\\Q|\\E\\s*in\\s+out" +
        "\\s*\\Q|\\E\\s*int\\s+csw\\s*$";

    /** */
    private static final Pattern HEADER_LINE = Pattern.compile(HEADER_LINE_RE);

    /** */
    private static final Pattern VALUES_PAT;

    /**
     *
     */
    static {
        int numFields = 18;

        StringBuilder sb = new StringBuilder("^\\s*");

        for (int i = 0; i < numFields; i++) {
            sb.append("(\\d*\\.\\d+\\w?|\\d+\\w?|-)");

            if (i < numFields - 1) {
                if (i == 3 || i == 9 || i == 11 || i == 13 || i == 15)
                    sb.append("\\s*\\Q|\\E\\s*");
                else
                    sb.append("\\s+");
            }
            else
                sb.append("\\s*");
        }

        sb.append("\\s*$");

        VALUES_PAT = Pattern.compile(sb.toString());
    }

    /** */
    private BenchmarkConfiguration cfg;

    /** */
    private BenchmarkProcessLauncher proc;

    /** Collected points. */
    private Collection<BenchmarkProbePoint> collected = new ArrayList<>();

    /** {@inheritDoc} */
    @Override public void start(BenchmarkDriver drv, BenchmarkConfiguration cfg) throws Exception {
        this.cfg = cfg;

        start0(cfg);
    }

    /** {@inheritDoc} */
    @Override public void start(BenchmarkServer srv, BenchmarkConfiguration cfg) throws Exception {
        this.cfg = cfg;

        start0(cfg);
    }

    /**
     * Starts <i>dstat</i> probe.
     *
     * @param cfg Benchmark configuration.
     */
    private void start0(BenchmarkConfiguration cfg) {
        BenchmarkClosure<String> c = new BenchmarkClosure<String>() {
            private final AtomicInteger lineNum = new AtomicInteger(0);

            @Override public void apply(String s) {
                parseLine(lineNum.getAndIncrement(), s);
            }
        };

        proc = new BenchmarkProcessLauncher();

        Collection<String> cmdParams = new ArrayList<>();

        cmdParams.add(path(cfg));
        cmdParams.addAll(opts(cfg));

        String execCmd = cmdParams.toString().replaceAll(",|\\[|\\]", "");

        try {
            proc.exec(cmdParams, Collections.<String, String>emptyMap(), c);

            println(cfg, getClass().getSimpleName() + " is started. Command: '" + execCmd + "'");
        }
        catch (Exception e) {
            errorHelp(cfg, "Can not start: '" + execCmd + "'.", e);
        }
    }

    /** {@inheritDoc} */
    @Override public void stop() throws Exception {
        if (proc != null) {
            proc.shutdown(false);

            println(cfg, getClass().getSimpleName() + " is stopped.");
        }
    }

    /** {@inheritDoc} */
    @Override public Collection<String> metaInfo() {
        return Arrays.asList("Time, sec", "Memory Used, KB", "Memory Buffered, KB", "Memory Cached, KB",
            "Memory Free, KB", "CPU User, %", "CPU System, %", "CPU Idle, %", "CPU Wait, %",
            "CPU Hardware Interrupts", "CPU Software Interrupts",
            "Disk Read, B", "Disk Write, B", "Network Receive, B", "Network Send, B",
            "Page In, B", "Page Out, B", "System Interrupts, per sec", "System Context Switches, per sec");
    }

    /** {@inheritDoc} */
    @Override public synchronized Collection<BenchmarkProbePoint> points() {
        Collection<BenchmarkProbePoint> ret = collected;

        collected = new ArrayList<>(ret.size() + 5);

        return ret;
    }

    /** {@inheritDoc} */
    @Override public void buildPoint(long time) {
        // No-op.
    }

    /**
     * @param pnt Probe point.
     */
    private synchronized void collectPoint(BenchmarkProbePoint pnt) {
        collected.add(pnt);
    }

    /**
     * @param lineNum Line number.
     * @param line Line to parse.
     */
    private void parseLine(int lineNum, String line) {
        if (lineNum == 0) {
            Matcher m = FIRST_LINE.matcher(line);

            if (!m.matches())
                println(cfg, "WARNING: Unexpected first line: " + line);
        }
        else if (lineNum == 1) {
            Matcher m = HEADER_LINE.matcher(line);

            if (!m.matches())
                errorHelp(cfg, "Header line does not match expected header " +
                    "[exp=" + HEADER_LINE + ", act=" + line + "].");
        }
        else {
            Matcher m = VALUES_PAT.matcher(line);

            if (m.matches()) {
                try {
                    BenchmarkProbePoint pnt = new BenchmarkProbePoint(
                        TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis()),
                        new double[] {
                            parseValueWithUnit(m.group(1)) / 1024, parseValueWithUnit(m.group(2)) / 1024,
                            parseValueWithUnit(m.group(3)) / 1024, parseValueWithUnit(m.group(4)) / 1024,
                            parseValueWithUnit(m.group(5)), parseValueWithUnit(m.group(6)),
                            parseValueWithUnit(m.group(7)), parseValueWithUnit(m.group(8)),
                            parseValueWithUnit(m.group(9)), parseValueWithUnit(m.group(10)),
                            parseValueWithUnit(m.group(11)), parseValueWithUnit(m.group(12)),
                            parseValueWithUnit(m.group(13)), parseValueWithUnit(m.group(14)),
                            parseValueWithUnit(m.group(15)), parseValueWithUnit(m.group(16)),
                            parseValueWithUnit(m.group(17)), parseValueWithUnit(m.group(18)),
                        });

                    collectPoint(pnt);
                }
                catch (NumberFormatException e) {
                    errorHelp(cfg, "Can't parse line: " + line, e);
                }
            }
            else
                errorHelp(cfg, "Can't parse line: " + line);
        }
    }

    /**
     * @param val Value.
     * @return Parsed value.
     */
    private static double parseValueWithUnit(String val) {
        if (val.isEmpty())
            throw new NumberFormatException("Value is empty.");

        char last = val.charAt(val.length() - 1);

        if (last == '-')
            return 0;

        if (Character.isDigit(last))
            return Double.parseDouble(val);

        int multiplier;

        if (last == 'B')
            multiplier = 1;
        else if (last == 'k')
            multiplier = 1024;
        else if (last == 'M')
            multiplier = 1048576;
        else if (last == 'G')
            multiplier = 1073741824;
        else
            throw new NumberFormatException("Unknown unit of measure: [unit=" + last + ", val=" + val + "]");

        return Double.parseDouble(val.substring(0, val.length() - 1)) * multiplier;
    }

    /**
     * @param cfg Config.
     * @return Path to dstat executable.
     */
    private static String path(BenchmarkConfiguration cfg) {
        String res = cfg.customProperties().get(PATH);

        return res == null || res.isEmpty() ? DEFAULT_PATH : res;
    }

    /**
     * @param cfg Config.
     * @return Options of dstat.
     */
    private static Collection<String> opts(BenchmarkConfiguration cfg) {
        String res = cfg.customProperties().get(OPTS);

        res = res == null || res.isEmpty() ? DEFAULT_OPTS : res;

        return Arrays.asList(res.split("\\s+"));
    }
}
